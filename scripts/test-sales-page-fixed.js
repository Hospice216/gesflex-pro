// Script de test pour analyser la page Ventes
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://qxxldshkowjbcbnchokg.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF4eGxkc2hrb3dqYmNibmNob2tnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ0MzAzMCwiZXhwIjoyMDUwMDA2MzB9.3224030f-ec32-4f54-abae-d957ef1a9ce1'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testSalesPage() {
  console.log('üîç Test de la page Ventes...\n')

  // Test 1: V√©rifier les donn√©es existantes
  console.log('1Ô∏è‚É£ V√©rification des donn√©es existantes:')
  
  const { data: sales, error: salesError } = await supabase
    .from('sales')
    .select(`
      *,
      sale_items(count),
      stores(name),
      users!sales_created_by_fkey(first_name, last_name)
    `)
    .order('created_at', { ascending: false })
    .limit(10)

  if (salesError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des ventes:', salesError)
    return
  }

  console.log(`  üìä Ventes trouv√©es: ${sales?.length || 0}`)

  if (sales && sales.length > 0) {
    console.log('  üìã Exemple de vente:')
    const sale = sales[0]
    console.log(`     - Code: ${sale.sale_code}`)
    console.log(`     - Magasin: ${sale.stores?.name || 'Non d√©fini'}`)
    console.log(`     - Client: ${sale.customer_name || 'Client anonyme'}`)
    console.log(`     - Montant total: ${sale.total_amount} XOF`)
    console.log(`     - M√©thode de paiement: ${sale.payment_method}`)
    console.log(`     - Cr√©√© par: ${sale.users?.first_name} ${sale.users?.last_name}`)
    console.log(`     - Date: ${new Date(sale.created_at).toLocaleDateString()}`)
  }

  // Test 2: V√©rifier les calculs et statistiques
  console.log('\n2Ô∏è‚É£ V√©rification des calculs et statistiques:')
  
  if (sales && sales.length > 0) {
    const totalSales = sales.reduce((sum, sale) => sum + sale.total_amount, 0)
    const averageTicket = sales.length > 0 ? totalSales / sales.length : 0
    const pendingSales = sales.filter(sale => sale.payment_method === 'pending').length

    console.log('  üìä Statistiques calcul√©es:')
    console.log(`     - Total des ventes: ${totalSales.toFixed(2)} XOF`)
    console.log(`     - Nombre de transactions: ${sales.length}`)
    console.log(`     - Panier moyen: ${averageTicket.toFixed(2)} XOF`)
    console.log(`     - Ventes en attente: ${pendingSales}`)
  }

  // Test 3: V√©rifier la coh√©rence des donn√©es
  console.log('\n3Ô∏è‚É£ V√©rification de la coh√©rence des donn√©es:')
  
  if (sales && sales.length > 0) {
    let issues = 0
    
    sales.forEach((sale, index) => {
      // V√©rifier que le montant total est coh√©rent
      if (sale.subtotal && sale.tax_amount && sale.total_amount) {
        const calculatedTotal = sale.subtotal + sale.tax_amount
        if (Math.abs(calculatedTotal - sale.total_amount) > 0.01) {
          console.log(`  ‚ö†Ô∏è Vente ${index + 1}: Montant total incoh√©rent`)
          console.log(`     Calcul√©: ${calculatedTotal}, Enregistr√©: ${sale.total_amount}`)
          issues++
        }
      }

      // V√©rifier que le code de vente est unique
      const duplicateCodes = sales.filter(s => s.sale_code === sale.sale_code)
      if (duplicateCodes.length > 1) {
        console.log(`  ‚ö†Ô∏è Code de vente dupliqu√©: ${sale.sale_code}`)
        issues++
      }

      // V√©rifier que les dates sont logiques
      const saleDate = new Date(sale.created_at)
      const now = new Date()
      if (saleDate > now) {
        console.log(`  ‚ö†Ô∏è Vente ${index + 1}: Date future: ${saleDate}`)
        issues++
      }
    })

    if (issues === 0) {
      console.log('  ‚úÖ Aucun probl√®me de coh√©rence d√©tect√©')
    } else {
      console.log(`  ‚ö†Ô∏è ${issues} probl√®me(s) de coh√©rence d√©tect√©(s)`)
    }
  }

  // Test 4: V√©rifier les permissions par r√¥le
  console.log('\n4Ô∏è‚É£ Test des permissions par r√¥le:')
  
  const roles = ['Vendeur', 'Manager', 'Admin', 'SuperAdmin']
  
  for (const role of roles) {
    console.log(`\nüë§ R√¥le: ${role}`)
    
    const canCreate = ['Vendeur', 'Manager', 'Admin', 'SuperAdmin'].includes(role)
    const canView = ['Vendeur', 'Manager', 'Admin', 'SuperAdmin'].includes(role)
    const canEdit = ['Manager', 'Admin', 'SuperAdmin'].includes(role)
    const canDelete = ['Admin', 'SuperAdmin'].includes(role)
    
    console.log(`  - Cr√©er une vente: ${canCreate ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Voir les ventes: ${canView ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Modifier une vente: ${canEdit ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Supprimer une vente: ${canDelete ? '‚úÖ' : '‚ùå'}`)
  }

  // Test 5: V√©rifier les fonctionnalit√©s de recherche
  console.log('\n5Ô∏è‚É£ Test des fonctionnalit√©s de recherche:')
  
  if (sales && sales.length > 0) {
    const testSale = sales[0]
    const searchTerms = [
      testSale.sale_code,
      testSale.customer_name,
      testSale.sale_code.substring(0, 3),
      'VENTE_INEXISTANTE'
    ]
    
    for (const term of searchTerms) {
      if (term) {
        const filtered = sales.filter(sale =>
          sale.sale_code.toLowerCase().includes(term.toLowerCase()) ||
          (sale.customer_name && sale.customer_name.toLowerCase().includes(term.toLowerCase()))
        )
        console.log(`  üîç Recherche "${term}": ${filtered.length} vente(s) trouv√©e(s)`)
      }
    }
  }

  // Test 6: V√©rifier les m√©thodes de paiement
  console.log('\n6Ô∏è‚É£ V√©rification des m√©thodes de paiement:')
  
  if (sales && sales.length > 0) {
    const paymentMethods = {}
    sales.forEach(sale => {
      paymentMethods[sale.payment_method] = (paymentMethods[sale.payment_method] || 0) + 1
    })
    
    console.log('  üí≥ R√©partition des m√©thodes de paiement:')
    Object.entries(paymentMethods).forEach(([method, count]) => {
      console.log(`     - ${method}: ${count} vente(s)`)
    })
  }

  // Test 7: V√©rifier les performances
  console.log('\n7Ô∏è‚É£ Test des performances:')
  
  const startTime = Date.now()
  const { data: performanceTest, error: performanceError } = await supabase
    .from('sales')
    .select('*')
    .limit(100)
  
  const endTime = Date.now()
  const queryTime = endTime - startTime
  
  if (performanceError) {
    console.error('  ‚ùå Erreur lors du test de performance:', performanceError)
  } else {
    console.log(`  ‚ö° Temps de requ√™te: ${queryTime}ms`)
    console.log(`  üìä ${performanceTest?.length || 0} ventes r√©cup√©r√©es`)
    
    if (queryTime < 1000) {
      console.log('  ‚úÖ Performance acceptable')
    } else {
      console.log('  ‚ö†Ô∏è Performance lente, optimisation recommand√©e')
    }
  }

  console.log('\n‚úÖ Test de la page Ventes termin√©!')
  console.log('\nüìã R√©sum√© des v√©rifications:')
  console.log('  - Donn√©es existantes: ‚úÖ Analys√©es')
  console.log('  - Calculs et statistiques: ‚úÖ Valid√©s')
  console.log('  - Coh√©rence des donn√©es: ‚úÖ Test√©e')
  console.log('  - Permissions par r√¥le: ‚úÖ D√©finies')
  console.log('  - Fonctionnalit√©s de recherche: ‚úÖ Test√©es')
  console.log('  - M√©thodes de paiement: ‚úÖ V√©rifi√©es')
  console.log('  - Performances: ‚úÖ Mesur√©es')
}

// Ex√©cuter le test
testSalesPage().catch(console.error) 
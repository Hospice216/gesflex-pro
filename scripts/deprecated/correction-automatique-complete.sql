-- =====================================================
-- CORRECTION AUTOMATIQUE COMPL√àTE
-- Tous les probl√®mes de relations identifi√©s
-- =====================================================

-- D√©but de la transaction
BEGIN;

-- 1. CORRECTION DE LA RELATION USER_STORES - STORES
DO $$
BEGIN
    -- V√©rifier si la contrainte existe d√©j√†
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'user_stores_store_id_fkey' 
        AND table_name = 'user_stores'
    ) THEN
        -- Supprimer la contrainte existante sans nom (si elle existe)
        ALTER TABLE user_stores DROP CONSTRAINT IF EXISTS user_stores_store_id_fkey;
        
        -- Ajouter la contrainte de cl√© √©trang√®re
        ALTER TABLE user_stores 
        ADD CONSTRAINT user_stores_store_id_fkey 
        FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE CASCADE;
        
        RAISE NOTICE '‚úÖ Contrainte user_stores_store_id_fkey ajout√©e avec succ√®s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La contrainte user_stores_store_id_fkey existe d√©j√†';
    END IF;
END $$;

-- 2. CORRECTION DE LA RELATION SALES - USERS
DO $$
BEGIN
    -- V√©rifier si la contrainte existe d√©j√†
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'sales_created_by_fkey' 
        AND table_name = 'sales'
    ) THEN
        -- Supprimer la contrainte existante sans nom (si elle existe)
        ALTER TABLE sales DROP CONSTRAINT IF EXISTS sales_sold_by_fkey;
        
        -- Ajouter la contrainte de cl√© √©trang√®re avec le nom correct
        ALTER TABLE sales 
        ADD CONSTRAINT sales_created_by_fkey 
        FOREIGN KEY (sold_by) REFERENCES users(id) ON DELETE RESTRICT;
        
        RAISE NOTICE '‚úÖ Contrainte sales_created_by_fkey ajout√©e avec succ√®s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La contrainte sales_created_by_fkey existe d√©j√†';
    END IF;
END $$;

-- 3. CR√âATION DE LA TABLE EXPENSES SI ELLE N'EXISTE PAS
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'expenses' 
        AND table_schema = 'public'
    ) THEN
        -- Cr√©er la table expenses
        CREATE TABLE expenses (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            title TEXT NOT NULL,
            description TEXT,
            category TEXT NOT NULL,
            amount DECIMAL(10,2) NOT NULL CHECK (amount > 0),
            expense_date DATE NOT NULL DEFAULT CURRENT_DATE,
            store_id UUID REFERENCES stores(id) ON DELETE SET NULL,
            created_by UUID REFERENCES users(id) ON DELETE SET NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Ajouter les index
        CREATE INDEX idx_expenses_store_id ON expenses(store_id);
        CREATE INDEX idx_expenses_created_by ON expenses(created_by);
        CREATE INDEX idx_expenses_expense_date ON expenses(expense_date);
        CREATE INDEX idx_expenses_category ON expenses(category);
        
        -- Activer RLS
        ALTER TABLE expenses ENABLE ROW LEVEL SECURITY;
        
        -- Cr√©er les politiques RLS
        CREATE POLICY "Users can view expenses from their stores" ON expenses
            FOR SELECT USING (
                store_id IN (
                    SELECT store_id FROM user_stores WHERE user_id = auth.uid()
                )
            );
        
        CREATE POLICY "Users can insert expenses for their stores" ON expenses
            FOR INSERT WITH CHECK (
                store_id IN (
                    SELECT store_id FROM user_stores WHERE user_id = auth.uid()
                )
            );
        
        CREATE POLICY "Users can update expenses for their stores" ON expenses
            FOR UPDATE USING (
                store_id IN (
                    SELECT store_id FROM user_stores WHERE user_id = auth.uid()
                )
            );
        
        CREATE POLICY "Users can delete expenses for their stores" ON expenses
            FOR DELETE USING (
                store_id IN (
                    SELECT store_id FROM user_stores WHERE user_id = auth.uid()
                )
            );
        
        RAISE NOTICE '‚úÖ Table expenses cr√©√©e avec succ√®s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La table expenses existe d√©j√†';
    END IF;
END $$;

-- 4. CORRECTION DE LA RELATION EXPENSES - STORES
DO $$
BEGIN
    -- V√©rifier si la contrainte existe d√©j√†
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'expenses_store_id_fkey' 
        AND table_name = 'expenses'
    ) THEN
        -- Ajouter la contrainte de cl√© √©trang√®re
        ALTER TABLE expenses 
        ADD CONSTRAINT expenses_store_id_fkey 
        FOREIGN KEY (store_id) REFERENCES stores(id) ON DELETE SET NULL;
        
        RAISE NOTICE '‚úÖ Contrainte expenses_store_id_fkey ajout√©e avec succ√®s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La contrainte expenses_store_id_fkey existe d√©j√†';
    END IF;
END $$;

-- 5. CORRECTION DE LA RELATION EXPENSES - USERS
DO $$
BEGIN
    -- V√©rifier si la contrainte existe d√©j√†
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'expenses_created_by_fkey' 
        AND table_name = 'expenses'
    ) THEN
        -- Ajouter la contrainte de cl√© √©trang√®re
        ALTER TABLE expenses 
        ADD CONSTRAINT expenses_created_by_fkey 
        FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL;
        
        RAISE NOTICE '‚úÖ Contrainte expenses_created_by_fkey ajout√©e avec succ√®s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La contrainte expenses_created_by_fkey existe d√©j√†';
    END IF;
END $$;

-- 6. V√âRIFICATION FINALE DES CONTRAINTES
SELECT 
    'V√âRIFICATION FINALE' as diagnostic_type,
    tc.table_name,
    kcu.column_name,
    tc.constraint_name,
    ccu.table_name AS foreign_table_name,
    'OK' as status
FROM information_schema.table_constraints AS tc
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
AND tc.table_name IN ('user_stores', 'sales', 'expenses')
ORDER BY tc.table_name, kcu.column_name;

-- 7. INSERTION DE DONN√âES DE TEST SI LES TABLES SONT VIDES
DO $$
BEGIN
    -- Ins√©rer des donn√©es de test dans expenses si la table est vide
    IF NOT EXISTS (SELECT 1 FROM expenses LIMIT 1) THEN
        INSERT INTO expenses (title, description, category, amount, store_id, created_by)
        VALUES 
            ('Achat fournitures', 'Fournitures de bureau', 'Fournitures', 150.00, 
             (SELECT id FROM stores LIMIT 1), 
             (SELECT id FROM users LIMIT 1)),
            ('Maintenance √©quipement', 'R√©paration imprimante', 'Maintenance', 200.00,
             (SELECT id FROM stores LIMIT 1), 
             (SELECT id FROM users LIMIT 1)),
            ('Marketing', 'Publicit√© locale', 'Marketing', 300.00,
             (SELECT id FROM stores LIMIT 1), 
             (SELECT id FROM users LIMIT 1));
        
        RAISE NOTICE '‚úÖ Donn√©es de test ajout√©es dans expenses';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è La table expenses contient d√©j√† des donn√©es';
    END IF;
END $$;

-- Validation de la transaction
COMMIT;

-- Message de fin
SELECT 'üéâ CORRECTION AUTOMATIQUE TERMIN√âE AVEC SUCC√àS' as result;

// Script de test pour analyser la page Produits
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://qxxldshkowjbcbnchokg.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF4eGxkc2hrb3dqYmNibmNob2tnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ0MzAzMCwiZXhwIjoyMDUwMDA2MzB9.3224030f-ec32-4f54-abae-d957ef1a9ce1'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testProductsPage() {
  console.log('üîç Analyse de la page Produits...\n')

  // Test 1: V√©rifier la structure de la base de donn√©es
  console.log('1Ô∏è‚É£ V√©rification de la structure de la base de donn√©es:')
  
  // V√©rifier les tables principales
  const tables = ['products', 'categories', 'units', 'product_stores']
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1)
      
      if (error) {
        console.error(`  ‚ùå Erreur avec la table ${table}:`, error.message)
      } else {
        console.log(`  ‚úÖ Table ${table}: OK`)
      }
    } catch (error) {
      console.error(`  ‚ùå Erreur avec la table ${table}:`, error.message)
    }
  }

  // Test 2: V√©rifier les donn√©es existantes
  console.log('\n2Ô∏è‚É£ V√©rification des donn√©es existantes:')
  
  // Produits
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select(`
      *,
      categories(name),
      units(name, symbol)
    `)
    .limit(5)

  if (productsError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des produits:', productsError)
  } else {
    console.log(`  üìä Produits trouv√©s: ${products?.length || 0}`)
    if (products && products.length > 0) {
      console.log('  üìã Exemple de produit:')
      const product = products[0]
      console.log(`     - Nom: ${product.name}`)
      console.log(`     - SKU: ${product.sku}`)
      console.log(`     - Cat√©gorie: ${product.categories?.name || 'Non cat√©goris√©'}`)
      console.log(`     - Unit√©: ${product.units?.name} (${product.units?.symbol})`)
      console.log(`     - Prix actuel: ${product.current_sale_price} XOF`)
      console.log(`     - Prix minimum: ${product.min_sale_price} XOF`)
    }
  }

  // Cat√©gories
  const { data: categories, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .eq('is_active', true)

  if (categoriesError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des cat√©gories:', categoriesError)
  } else {
    console.log(`  üìä Cat√©gories actives: ${categories?.length || 0}`)
  }

  // Unit√©s
  const { data: units, error: unitsError } = await supabase
    .from('units')
    .select('*')
    .eq('is_active', true)

  if (unitsError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des unit√©s:', unitsError)
  } else {
    console.log(`  üìä Unit√©s actives: ${units?.length || 0}`)
  }

  // Test 3: V√©rifier les permissions par r√¥le
  console.log('\n3Ô∏è‚É£ Test des permissions par r√¥le:')
  
  const roles = ['Vendeur', 'Manager', 'Admin', 'SuperAdmin']
  
  for (const role of roles) {
    console.log(`\nüìã Test pour le r√¥le: ${role}`)
    
    // Simuler les permissions de la page Produits
    const canAddProduct = ['Admin', 'SuperAdmin', 'Manager'].includes(role)
    const canEditProduct = ['Admin', 'SuperAdmin', 'Manager'].includes(role)
    const canDeleteProduct = ['Admin', 'SuperAdmin'].includes(role)
    const canAddCategory = ['Admin', 'SuperAdmin', 'Manager'].includes(role)
    
    console.log(`  üîß Permissions:`)
    console.log(`     - Ajouter produit: ${canAddProduct ? '‚úÖ OUI' : '‚ùå NON'}`)
    console.log(`     - Modifier produit: ${canEditProduct ? '‚úÖ OUI' : '‚ùå NON'}`)
    console.log(`     - Supprimer produit: ${canDeleteProduct ? '‚úÖ OUI' : '‚ùå NON'}`)
    console.log(`     - Ajouter cat√©gorie: ${canAddCategory ? '‚úÖ OUI' : '‚ùå NON'}`)
    
    // Simuler l'affichage des boutons
    console.log(`  üéØ Interface:`)
    console.log(`     - Bouton "Nouveau produit": ${canAddProduct ? '‚úÖ Visible' : '‚ùå Masqu√©'}`)
    console.log(`     - Bouton "Nouvelle cat√©gorie": ${canAddCategory ? '‚úÖ Visible' : '‚ùå Masqu√©'}`)
    console.log(`     - Actions dans le menu: ${canEditProduct || canDeleteProduct ? '‚úÖ Disponibles' : '‚ùå Limit√©es'}`)
  }

  // Test 4: V√©rifier la coh√©rence des champs
  console.log('\n4Ô∏è‚É£ V√©rification de la coh√©rence des champs:')
  
  if (products && products.length > 0) {
    const product = products[0]
    
    // V√©rifier les champs requis
    const requiredFields = ['name', 'sku', 'category_id', 'unit_id', 'current_sale_price', 'min_sale_price']
    const missingFields = requiredFields.filter(field => !product[field])
    
    if (missingFields.length > 0) {
      console.log(`  ‚ö†Ô∏è  Champs manquants: ${missingFields.join(', ')}`)
    } else {
      console.log('  ‚úÖ Tous les champs requis sont pr√©sents')
    }
    
    // V√©rifier la coh√©rence des prix
    if (product.current_sale_price < product.min_sale_price) {
      console.log('  ‚ö†Ô∏è  Prix actuel inf√©rieur au prix minimum')
    } else {
      console.log('  ‚úÖ Prix coh√©rents')
    }
    
    // V√©rifier les relations
    if (!product.categories) {
      console.log('  ‚ö†Ô∏è  Cat√©gorie manquante')
    } else {
      console.log('  ‚úÖ Cat√©gorie pr√©sente')
    }
    
    if (!product.units) {
      console.log('  ‚ö†Ô∏è  Unit√© manquante')
    } else {
      console.log('  ‚úÖ Unit√© pr√©sente')
    }
  }

  // Test 5: V√©rifier les fonctionnalit√©s de recherche
  console.log('\n5Ô∏è‚É£ Test des fonctionnalit√©s de recherche:')
  
  if (products && products.length > 0) {
    const testProduct = products[0]
    const searchTerms = [
      testProduct.name,
      testProduct.sku,
      testProduct.name.substring(0, 3),
      'PRODUIT_INEXISTANT'
    ]
    
    for (const term of searchTerms) {
      const filtered = products.filter(product =>
        product.name.toLowerCase().includes(term.toLowerCase()) ||
        product.sku.toLowerCase().includes(term.toLowerCase())
      )
      console.log(`  üîç Recherche "${term}": ${filtered.length} r√©sultat(s)`)
    }
  }

  // Test 6: V√©rifier les contraintes de validation
  console.log('\n6Ô∏è‚É£ Test des contraintes de validation:')
  
  const validationTests = [
    { name: 'Produit valide', data: { name: 'Test', sku: 'TEST-001', current_sale_price: 1000, min_sale_price: 800 } },
    { name: 'Prix n√©gatif', data: { name: 'Test', sku: 'TEST-002', current_sale_price: -100, min_sale_price: 800 } },
    { name: 'Prix actuel < prix min', data: { name: 'Test', sku: 'TEST-003', current_sale_price: 500, min_sale_price: 800 } },
    { name: 'SKU vide', data: { name: 'Test', sku: '', current_sale_price: 1000, min_sale_price: 800 } }
  ]
  
  for (const test of validationTests) {
    console.log(`  üìã Test: ${test.name}`)
    
    // Simuler la validation c√¥t√© client
    const isValid = 
      test.data.name && 
      test.data.sku && 
      test.data.current_sale_price > 0 && 
      test.data.min_sale_price > 0 && 
      test.data.current_sale_price >= test.data.min_sale_price
    
    console.log(`     - Validit√©: ${isValid ? '‚úÖ Valide' : '‚ùå Invalide'}`)
  }

  console.log('\n‚úÖ Analyse de la page Produits termin√©e!')
  console.log('\nüìã R√©sum√© des v√©rifications:')
  console.log('  - Structure de base de donn√©es: ‚úÖ V√©rifi√©e')
  console.log('  - Permissions par r√¥le: ‚úÖ D√©finies')
  console.log('  - Coh√©rence des donn√©es: ‚úÖ V√©rifi√©e')
  console.log('  - Fonctionnalit√©s de recherche: ‚úÖ Test√©es')
  console.log('  - Validation des donn√©es: ‚úÖ Impl√©ment√©e')
}

// Ex√©cuter le test
testProductsPage().catch(console.error) 
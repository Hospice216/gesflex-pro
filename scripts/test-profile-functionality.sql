-- =====================================================
-- TEST DES FONCTIONNALIT√âS DE LA PAGE PROFILE
-- V√©rification compl√®te du syst√®me
-- =====================================================

-- 1. V√âRIFIER L'EXISTENCE DES TABLES
SELECT 
    'V√âRIFICATION DES TABLES' as test_type,
    table_name,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name = table_name 
            AND table_schema = 'public'
        ) THEN '‚úÖ EXISTE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM (VALUES 
    ('gamification_levels'),
    ('gamification_points'),
    ('gamification_badges'),
    ('gamification_trophies'),
    ('user_badges'),
    ('user_trophies')
) as tables(table_name);

-- 2. V√âRIFIER LES CHAMPS MANQUANTS
SELECT 
    'CHAMPS MANQUANTS' as test_type,
    'user_trophies.period_month' as field_name,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'user_trophies' AND column_name = 'period_month'
        ) THEN '‚úÖ EXISTE'
        ELSE '‚ùå MANQUANT'
    END as status
UNION ALL
SELECT 
    'CHAMPS MANQUANTS' as test_type,
    'user_trophies.period_year' as field_name,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'user_trophies' AND column_name = 'period_year'
        ) THEN '‚úÖ EXISTE'
        ELSE '‚ùå MANQUANT'
    END as status;

-- 3. V√âRIFIER LES RELATIONS
SELECT 
    'RELATIONS' as test_type,
    tc.table_name,
    kcu.column_name,
    ccu.table_name AS foreign_table_name,
    CASE 
        WHEN tc.constraint_name IS NOT NULL THEN '‚úÖ EXISTE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM information_schema.table_constraints AS tc
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
AND tc.table_name IN ('user_badges', 'user_trophies', 'gamification_points')
ORDER BY tc.table_name, kcu.column_name;

-- 4. V√âRIFIER LES DONN√âES INITIALES
SELECT 
    'DONN√âES INITIALES' as test_type,
    'Niveaux' as entity,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ PR√âSENTES'
        ELSE '‚ùå MANQUANTES'
    END as status
FROM gamification_levels
UNION ALL
SELECT 
    'DONN√âES INITIALES' as test_type,
    'Badges' as entity,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ PR√âSENTES'
        ELSE '‚ùå MANQUANTES'
    END as status
FROM gamification_badges
UNION ALL
SELECT 
    'DONN√âES INITIALES' as test_type,
    'Troph√©es' as entity,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ PR√âSENTES'
        ELSE '‚ùå MANQUANTES'
    END as status
FROM gamification_trophies;

-- 5. V√âRIFIER LES PERMISSIONS RLS
SELECT 
    'PERMISSIONS RLS' as test_type,
    tablename,
    CASE 
        WHEN rowsecurity = true THEN '‚úÖ ACTIV√â'
        ELSE '‚ùå D√âSACTIV√â'
    END as rls_status
FROM pg_tables 
WHERE tablename LIKE 'gamification_%'
ORDER BY tablename;

-- 6. V√âRIFIER LES POLITIQUES RLS
SELECT 
    'POLITIQUES RLS' as test_type,
    tablename,
    policyname,
    cmd,
    CASE 
        WHEN policyname IS NOT NULL THEN '‚úÖ CONFIGUR√âE'
        ELSE '‚ùå MANQUANTE'
    END as policy_status
FROM pg_tables t
LEFT JOIN pg_policies p ON t.tablename = p.tablename
WHERE t.tablename LIKE 'gamification_%'
ORDER BY t.tablename, p.policyname;

-- 7. TEST D'INSERTION DE DONN√âES
DO $$
DECLARE
    test_user_id UUID;
    test_level_id UUID;
    test_badge_id UUID;
    test_trophy_id UUID;
    test_points_id UUID;
    test_user_badge_id UUID;
    test_user_trophy_id UUID;
BEGIN
    -- R√©cup√©rer un utilisateur de test
    SELECT id INTO test_user_id FROM users LIMIT 1;
    
    IF test_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun utilisateur trouv√© pour les tests';
        RETURN;
    END IF;
    
    -- Test d'insertion d'un niveau
    INSERT INTO gamification_levels (name, min_points, max_points, color, icon)
    VALUES ('Test Niveau', 1000, 1999, '#FF0000', 'test')
    RETURNING id INTO test_level_id;
    
    IF test_level_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion niveau: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion niveau: √âCHEC';
    END IF;
    
    -- Test d'insertion d'un badge
    INSERT INTO gamification_badges (name, description, icon, badge_type, required_role, condition_data)
    VALUES ('Test Badge', 'Badge de test', 'test', 'test', 'Vendeur', '{}')
    RETURNING id INTO test_badge_id;
    
    IF test_badge_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion badge: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion badge: √âCHEC';
    END IF;
    
    -- Test d'insertion d'un troph√©e
    INSERT INTO gamification_trophies (name, description, icon, trophy_type, condition_type, condition_value)
    VALUES ('Test Troph√©e', 'Troph√©e de test', 'test', 'test', 'test', 1)
    RETURNING id INTO test_trophy_id;
    
    IF test_trophy_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion troph√©e: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion troph√©e: √âCHEC';
    END IF;
    
    -- Test d'insertion de points
    INSERT INTO gamification_points (user_id, points, reason)
    VALUES (test_user_id, 50, 'Test attribution manuelle')
    RETURNING id INTO test_points_id;
    
    IF test_points_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion points: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion points: √âCHEC';
    END IF;
    
    -- Test d'insertion d'un badge utilisateur
    INSERT INTO user_badges (user_id, badge_id, awarded_at)
    VALUES (test_user_id, test_badge_id, NOW())
    RETURNING id INTO test_user_badge_id;
    
    IF test_user_badge_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion user_badge: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion user_badge: √âCHEC';
    END IF;
    
    -- Test d'insertion d'un troph√©e utilisateur
    INSERT INTO user_trophies (user_id, trophy_id, awarded_at, period_month, period_year)
    VALUES (test_user_id, test_trophy_id, NOW(), 1, 2024)
    RETURNING id INTO test_user_trophy_id;
    
    IF test_user_trophy_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ Test insertion user_trophy: SUCC√àS';
    ELSE
        RAISE NOTICE '‚ùå Test insertion user_trophy: √âCHEC';
    END IF;
    
    -- Nettoyer les donn√©es de test
    DELETE FROM user_trophies WHERE id = test_user_trophy_id;
    DELETE FROM user_badges WHERE id = test_user_badge_id;
    DELETE FROM gamification_points WHERE id = test_points_id;
    DELETE FROM gamification_trophies WHERE id = test_trophy_id;
    DELETE FROM gamification_badges WHERE id = test_badge_id;
    DELETE FROM gamification_levels WHERE id = test_level_id;
    
    RAISE NOTICE 'üßπ Donn√©es de test nettoy√©es';
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur lors des tests: %', SQLERRM;
END $$;

-- 8. TEST DES REQU√äTES DE LA PAGE PROFILE
DO $$
DECLARE
    test_user_id UUID;
    points_count INTEGER;
    badges_count INTEGER;
    trophies_count INTEGER;
    levels_count INTEGER;
BEGIN
    -- R√©cup√©rer un utilisateur de test
    SELECT id INTO test_user_id FROM users LIMIT 1;
    
    IF test_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun utilisateur trouv√© pour les tests';
        RETURN;
    END IF;
    
    -- Test de la requ√™te des points
    SELECT COUNT(*) INTO points_count FROM gamification_points WHERE user_id = test_user_id;
    RAISE NOTICE '‚úÖ Points pour l''utilisateur: %', points_count;
    
    -- Test de la requ√™te des badges
    SELECT COUNT(*) INTO badges_count FROM user_badges WHERE user_id = test_user_id;
    RAISE NOTICE '‚úÖ Badges pour l''utilisateur: %', badges_count;
    
    -- Test de la requ√™te des troph√©es
    SELECT COUNT(*) INTO trophies_count FROM user_trophies WHERE user_id = test_user_id;
    RAISE NOTICE '‚úÖ Troph√©es pour l''utilisateur: %', trophies_count;
    
    -- Test de la requ√™te des niveaux
    SELECT COUNT(*) INTO levels_count FROM gamification_levels;
    RAISE NOTICE '‚úÖ Niveaux disponibles: %', levels_count;
    
    -- Test de la jointure user_badges -> gamification_badges
    BEGIN
        SELECT COUNT(*) INTO badges_count 
        FROM user_badges ub
        JOIN gamification_badges gb ON ub.badge_id = gb.id
        WHERE ub.user_id = test_user_id;
        RAISE NOTICE '‚úÖ Jointure user_badges -> gamification_badges: SUCC√àS';
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Jointure user_badges -> gamification_badges: √âCHEC';
    END;
    
    -- Test de la jointure user_trophies -> gamification_trophies
    BEGIN
        SELECT COUNT(*) INTO trophies_count 
        FROM user_trophies ut
        JOIN gamification_trophies gt ON ut.trophy_id = gt.id
        WHERE ut.user_id = test_user_id;
        RAISE NOTICE '‚úÖ Jointure user_trophies -> gamification_trophies: SUCC√àS';
    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Jointure user_trophies -> gamification_trophies: √âCHEC';
    END;
    
END $$;

-- 9. V√âRIFICATION FINALE
SELECT 
    'R√âSUM√â DES TESTS' as test_type,
    'Tables cr√©√©es' as check_item,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) >= 6 THEN '‚úÖ COMPLET'
        ELSE '‚ùå INCOMPLET'
    END as status
FROM information_schema.tables 
WHERE table_name IN (
    'gamification_levels',
    'gamification_points',
    'gamification_badges',
    'gamification_trophies',
    'user_badges',
    'user_trophies'
)
AND table_schema = 'public';

-- 10. RECOMMANDATIONS
SELECT 
    'RECOMMANDATIONS' as test_type,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_name IN (
                'gamification_levels',
                'gamification_points',
                'gamification_badges',
                'gamification_trophies'
            )
        ) AND EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'user_trophies' 
            AND column_name IN ('period_month', 'period_year')
        ) THEN '‚úÖ Page Profile pr√™te √† utiliser'
        ELSE '‚ùå Page Profile n√©cessite des corrections'
    END as recommendation;

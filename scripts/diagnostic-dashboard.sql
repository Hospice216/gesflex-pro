-- =====================================================
-- GESFLEX PRO - DIAGNOSTIC DU DASHBOARD
-- Ce script v√©rifie ce qui existe r√©ellement dans votre base
-- et identifie pourquoi le Dashboard affiche des valeurs incorrectes
-- =====================================================

-- =====================================================
-- 1. V√âRIFICATION DES DONN√âES EXISTANTES
-- =====================================================

SELECT 'üîç V√âRIFICATION DES DONN√âES EXISTANTES' as section;

-- Compter les utilisateurs
SELECT 
    'Utilisateurs' as table_name,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ DONN√âES PR√âSENTES'
        ELSE '‚ùå AUCUNE DONN√âE'
    END as status
FROM users;

-- Compter les magasins
SELECT 
    'Magasins' as table_name,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ DONN√âES PR√âSENTES'
        ELSE '‚ùå AUCUNE DONN√âE'
    END as status
FROM stores;

-- Compter les produits
SELECT 
    'Produits' as table_name,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ DONN√âES PR√âSENTES'
        ELSE '‚ùå AUCUNE DONN√âE'
    END as status
FROM products;

-- Compter les ventes
SELECT 
    'Ventes' as table_name,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ DONN√âES PR√âSENTES'
        ELSE '‚ùå AUCUNE DONN√âE'
    END as status
FROM sales;

-- Compter les stocks
SELECT 
    'Stocks' as table_name,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ DONN√âES PR√âSENTES'
        ELSE '‚ùå AUCUNE DONN√âE'
    END as status
FROM product_stores;

-- =====================================================
-- 2. V√âRIFICATION DES VUES POSTGRESQL
-- =====================================================

SELECT 'üìä V√âRIFICATION DES VUES POSTGRESQL' as section;

-- V√©rifier si les vues existent
SELECT 
    'Vue low_stock_products_view' as vue,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'low_stock_products_view') THEN '‚úÖ EXISTE'
        ELSE '‚ùå N''EXISTE PAS'
    END as status;

SELECT 
    'Vue sales_stats_daily_view' as vue,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'sales_stats_daily_view') THEN '‚úÖ EXISTE'
        ELSE '‚ùå N''EXISTE PAS'
    END as status;

-- Tester les vues si elles existent
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'low_stock_products_view') THEN
        RAISE NOTICE 'Vue low_stock_products_view: ‚úÖ EXISTE';
        RAISE NOTICE 'Nombre de produits en stock faible: %', (SELECT COUNT(*) FROM low_stock_products_view);
    ELSE
        RAISE NOTICE 'Vue low_stock_products_view: ‚ùå N''EXISTE PAS';
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.views WHERE table_name = 'sales_stats_daily_view') THEN
        RAISE NOTICE 'Vue sales_stats_daily_view: ‚úÖ EXISTE';
        RAISE NOTICE 'Nombre de statistiques de ventes: %', (SELECT COUNT(*) FROM sales_stats_daily_view);
    ELSE
        RAISE NOTICE 'Vue sales_stats_daily_view: ‚ùå N''EXISTE PAS';
    END IF;
END $$;

-- =====================================================
-- 3. V√âRIFICATION DES FONCTIONS POSTGRESQL
-- =====================================================

SELECT '‚ö° V√âRIFICATION DES FONCTIONS POSTGRESQL' as section;

-- V√©rifier si les fonctions existent
SELECT 
    'Fonction get_store_inventory' as fonction,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_store_inventory') THEN '‚úÖ EXISTE'
        ELSE '‚ùå N''EXISTE PAS'
    END as status;

SELECT 
    'Fonction get_store_sales_stats' as fonction,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_store_sales_stats') THEN '‚úÖ EXISTE'
        ELSE '‚ùå N''EXISTE PAS'
    END as status;

-- =====================================================
-- 4. CALCUL MANUEL DES STATISTIQUES
-- =====================================================

SELECT 'üßÆ CALCUL MANUEL DES STATISTIQUES' as section;

-- Calculer le chiffre d'affaires total
SELECT 
    'Chiffre d''affaires total' as metric,
    COALESCE(SUM(total_amount), 0) as value,
    CASE 
        WHEN SUM(total_amount) > 0 THEN '‚úÖ CALCUL√â'
        ELSE '‚ùå AUCUNE VENTE'
    END as status
FROM sales;

-- Compter le nombre total de ventes
SELECT 
    'Nombre total de ventes' as metric,
    COUNT(*) as value,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ CALCUL√â'
        ELSE '‚ùå AUCUNE VENTE'
    END as status
FROM sales;

-- Compter les produits en stock faible
SELECT 
    'Produits en stock faible' as metric,
    COUNT(*) as value,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ CALCUL√â'
        ELSE '‚ùå AUCUN PRODUIT EN STOCK FAIBLE'
    END as status
FROM product_stores ps
JOIN products p ON ps.product_id = p.id
WHERE ps.current_stock <= p.alert_stock;

-- =====================================================
-- 5. V√âRIFICATION DES RELATIONS
-- =====================================================

SELECT 'üîó V√âRIFICATION DES RELATIONS' as section;

-- V√©rifier les produits avec cat√©gories
SELECT 
    'Produits avec cat√©gories' as relation,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ RELATIONS OK'
        ELSE '‚ùå RELATIONS MANQUANTES'
    END as status
FROM products p
JOIN categories c ON p.category_id = c.id;

-- V√©rifier les produits avec unit√©s
SELECT 
    'Produits avec unit√©s' as relation,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ RELATIONS OK'
        ELSE '‚ùå RELATIONS MANQUANTES'
    END as status
FROM products p
JOIN units u ON p.unit_id = u.id;

-- V√©rifier les stocks par magasin
SELECT 
    'Stocks par magasin' as relation,
    COUNT(*) as count,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ RELATIONS OK'
        ELSE '‚ùå RELATIONS MANQUANTES'
    END as status
FROM product_stores ps
JOIN products p ON ps.product_id = p.id
JOIN stores s ON ps.store_id = s.id;

-- =====================================================
-- 6. R√âSUM√â DU DIAGNOSTIC
-- =====================================================

SELECT 'üéØ R√âSUM√â DU DIAGNOSTIC' as section;

-- R√©sum√© final
DO $$
DECLARE
    users_count INTEGER;
    stores_count INTEGER;
    products_count INTEGER;
    sales_count INTEGER;
    stock_count INTEGER;
    revenue_total DECIMAL;
    low_stock_count INTEGER;
BEGIN
    -- Compter les √©l√©ments
    SELECT COUNT(*) INTO users_count FROM users;
    SELECT COUNT(*) INTO stores_count FROM stores;
    SELECT COUNT(*) INTO products_count FROM products;
    SELECT COUNT(*) INTO sales_count FROM sales;
    SELECT COUNT(*) INTO stock_count FROM product_stores;
    SELECT COALESCE(SUM(total_amount), 0) INTO revenue_total FROM sales;
    
    -- Compter les produits en stock faible
    SELECT COUNT(*) INTO low_stock_count 
    FROM product_stores ps
    JOIN products p ON ps.product_id = p.id
    WHERE ps.current_stock <= p.alert_stock;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìä R√âSUM√â DU DIAGNOSTIC DU DASHBOARD';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Utilisateurs: %', users_count;
    RAISE NOTICE '‚úÖ Magasins: %', stores_count;
    RAISE NOTICE '‚úÖ Produits: %', products_count;
    RAISE NOTICE '‚úÖ Ventes: %', sales_count;
    RAISE NOTICE '‚úÖ Stocks: %', stock_count;
    RAISE NOTICE '‚úÖ Chiffre d''affaires: % ‚Ç¨', revenue_total;
    RAISE NOTICE '‚úÖ Produits en stock faible: %', low_stock_count;
    RAISE NOTICE '';
    
    IF sales_count = 0 THEN
        RAISE NOTICE 'üö® PROBL√àME: Aucune vente dans la base - Dashboard affichera 0';
    END IF;
    
    IF low_stock_count = 0 THEN
        RAISE NOTICE 'üö® PROBL√àME: Aucun produit en stock faible - Dashboard affichera 0';
    END IF;
    
    IF revenue_total = 0 THEN
        RAISE NOTICE 'üö® PROBL√àME: Aucun chiffre d''affaires - Dashboard affichera 0';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üí° SOLUTION: V√©rifiez que les donn√©es de test ont √©t√© ins√©r√©es correctement';
    RAISE NOTICE '';
END $$;

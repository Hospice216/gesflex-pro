// Script de test pour analyser la page Arrivage
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://qxxldshkowjbcbnchokg.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF4eGxkc2hrb3dqYmNibmNob2tnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ0MzAzMCwiZXhwIjoyMDUwMDA2MzB9.3224030f-ec32-4f54-abae-d957ef1a9ce1'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testArrivalsPage() {
  console.log('üîç Test de la page Arrivage...\n')

  // Test 1: V√©rifier les donn√©es existantes
  console.log('1Ô∏è‚É£ V√©rification des donn√©es existantes:')
  
  // R√©cup√©rer les achats en attente
  const { data: pendingPurchases, error: pendingError } = await supabase
    .from('purchases')
    .select(`
      *,
      suppliers(name),
      products(name, sku),
      stores(name),
      created_by_user:users!purchases_created_by_fkey(first_name, last_name)
    `)
    .eq('is_validated', false)
    .order('created_at', { ascending: false })

  if (pendingError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des achats en attente:', pendingError)
  } else {
    console.log(`  üìä Achats en attente: ${pendingPurchases?.length || 0}`)
  }

  // R√©cup√©rer les achats valid√©s
  const { data: validatedPurchases, error: validatedError } = await supabase
    .from('purchases')
    .select(`
      *,
      suppliers(name),
      products(name, sku),
      stores(name),
      validated_by_user:users!purchases_validated_by_fkey(first_name, last_name)
    `)
    .eq('is_validated', true)
    .order('validated_at', { ascending: false })
    .limit(50)

  if (validatedError) {
    console.error('  ‚ùå Erreur lors de la r√©cup√©ration des achats valid√©s:', validatedError)
  } else {
    console.log(`  üìä Achats valid√©s: ${validatedPurchases?.length || 0}`)
  }

  // Test 2: V√©rifier la structure des donn√©es
  console.log('\n2Ô∏è‚É£ V√©rification de la structure des donn√©es:')
  
  if (pendingPurchases && pendingPurchases.length > 0) {
    console.log('  üìã Exemple d\'achat en attente:')
    const purchase = pendingPurchases[0]
    console.log(`     - ID: ${purchase.id}`)
    console.log(`     - Fournisseur: ${purchase.suppliers?.name || 'Non d√©fini'}`)
    console.log(`     - Produit: ${purchase.products?.name} (${purchase.products?.sku})`)
    console.log(`     - Magasin: ${purchase.stores?.name || 'Non d√©fini'}`)
    console.log(`     - Quantit√©: ${purchase.quantity}`)
    console.log(`     - Cr√©√© par: ${purchase.created_by_user?.first_name} ${purchase.created_by_user?.last_name}`)
    console.log(`     - Date cr√©ation: ${new Date(purchase.created_at).toLocaleDateString()}`)
    console.log(`     - Valid√©: ${purchase.is_validated ? 'Oui' : 'Non'}`)
  }

  if (validatedPurchases && validatedPurchases.length > 0) {
    console.log('  üìã Exemple d\'achat valid√©:')
    const purchase = validatedPurchases[0]
    console.log(`     - ID: ${purchase.id}`)
    console.log(`     - Fournisseur: ${purchase.suppliers?.name || 'Non d√©fini'}`)
    console.log(`     - Produit: ${purchase.products?.name} (${purchase.products?.sku})`)
    console.log(`     - Quantit√© command√©e: ${purchase.quantity}`)
    console.log(`     - Quantit√© valid√©e: ${purchase.validated_quantity || 'Non d√©finie'}`)
    console.log(`     - Valid√© par: ${purchase.validated_by_user?.first_name} ${purchase.validated_by_user?.last_name}`)
    console.log(`     - Date validation: ${purchase.validated_at ? new Date(purchase.validated_at).toLocaleDateString() : 'Non d√©finie'}`)
  }

  // Test 3: V√©rifier les relations et contraintes
  console.log('\n3Ô∏è‚É£ V√©rification des relations et contraintes:')
  
  // V√©rifier les cl√©s √©trang√®res
  const { data: foreignKeys, error: foreignKeysError } = await supabase
    .from('information_schema.key_column_usage')
    .select('constraint_name, column_name, referenced_table_name, referenced_column_name')
    .eq('table_name', 'purchases')
    .eq('table_schema', 'public')
    .not('referenced_table_name', 'is', null)

  if (foreignKeysError) {
    console.error('  ‚ùå Erreur lors de la v√©rification des cl√©s √©trang√®res:', foreignKeysError)
  } else {
    console.log('  üîó Cl√©s √©trang√®res de la table purchases:')
    foreignKeys.forEach(fk => {
      console.log(`     - ${fk.column_name} ‚Üí ${fk.referenced_table_name}.${fk.referenced_column_name}`)
    })
  }

  // Test 4: V√©rifier les RLS policies
  console.log('\n4Ô∏è‚É£ V√©rification des politiques RLS:')
  
  const { data: rlsPolicies, error: rlsError } = await supabase
    .from('information_schema.policies')
    .select('policy_name, table_name, permissive, roles, cmd, qual, with_check')
    .eq('table_name', 'purchases')
    .eq('table_schema', 'public')

  if (rlsError) {
    console.error('  ‚ùå Erreur lors de la v√©rification des RLS:', rlsError)
  } else {
    console.log('  üîê Politiques RLS pour purchases:')
    rlsPolicies.forEach(policy => {
      console.log(`     - ${policy.policy_name}: ${policy.cmd} (${policy.permissive ? 'permissive' : 'restrictive'})`)
    })
  }

  // Test 5: V√©rifier les calculs et statistiques
  console.log('\n5Ô∏è‚É£ V√©rification des calculs et statistiques:')
  
  const totalPending = pendingPurchases?.length || 0
  const totalValidated = validatedPurchases?.length || 0
  const totalPurchases = totalPending + totalValidated

  console.log('  üìä Statistiques calcul√©es:')
  console.log(`     - Achats en attente: ${totalPending}`)
  console.log(`     - Achats valid√©s: ${totalValidated}`)
  console.log(`     - Total des achats: ${totalPurchases}`)

  // Test 6: V√©rifier la coh√©rence des donn√©es
  console.log('\n6Ô∏è‚É£ V√©rification de la coh√©rence des donn√©es:')
  
  let issues = 0
  
  if (pendingPurchases && pendingPurchases.length > 0) {
    pendingPurchases.forEach((purchase, index) => {
      // V√©rifier que les achats en attente ne sont pas valid√©s
      if (purchase.is_validated) {
        console.log(`  ‚ö†Ô∏è Achat ${index + 1}: Marqu√© comme valid√© mais dans la liste en attente`)
        issues++
      }

      // V√©rifier que les quantit√©s sont positives
      if (purchase.quantity <= 0) {
        console.log(`  ‚ö†Ô∏è Achat ${index + 1}: Quantit√© non positive (${purchase.quantity})`)
        issues++
      }

      // V√©rifier que les dates sont logiques
      const purchaseDate = new Date(purchase.created_at)
      const now = new Date()
      if (purchaseDate > now) {
        console.log(`  ‚ö†Ô∏è Achat ${index + 1}: Date future (${purchaseDate})`)
        issues++
      }
    })
  }

  if (validatedPurchases && validatedPurchases.length > 0) {
    validatedPurchases.forEach((purchase, index) => {
      // V√©rifier que les achats valid√©s ont une quantit√© valid√©e
      if (!purchase.validated_quantity && purchase.validated_quantity !== 0) {
        console.log(`  ‚ö†Ô∏è Achat valid√© ${index + 1}: Pas de quantit√© valid√©e`)
        issues++
      }

      // V√©rifier que la quantit√© valid√©e est logique
      if (purchase.validated_quantity < 0) {
        console.log(`  ‚ö†Ô∏è Achat valid√© ${index + 1}: Quantit√© valid√©e n√©gative (${purchase.validated_quantity})`)
        issues++
      }

      // V√©rifier que la date de validation est logique
      if (purchase.validated_at) {
        const validationDate = new Date(purchase.validated_at)
        const purchaseDate = new Date(purchase.created_at)
        if (validationDate < purchaseDate) {
          console.log(`  ‚ö†Ô∏è Achat valid√© ${index + 1}: Date de validation ant√©rieure √† la cr√©ation`)
          issues++
        }
      }
    })
  }

  if (issues === 0) {
    console.log('  ‚úÖ Aucun probl√®me de coh√©rence d√©tect√©')
  } else {
    console.log(`  ‚ö†Ô∏è ${issues} probl√®me(s) de coh√©rence d√©tect√©(s)`)
  }

  // Test 7: V√©rifier les permissions par r√¥le
  console.log('\n7Ô∏è‚É£ Test des permissions par r√¥le:')
  
  const roles = ['Vendeur', 'Manager', 'Admin', 'SuperAdmin']
  
  for (const role of roles) {
    console.log(`\nüë§ R√¥le: ${role}`)
    
    const canView = ['Manager', 'Admin', 'SuperAdmin'].includes(role)
    const canValidate = ['Manager', 'Admin', 'SuperAdmin'].includes(role)
    const canCreate = ['Admin', 'SuperAdmin'].includes(role)
    
    console.log(`  - Voir les arrivages: ${canView ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Valider les arrivages: ${canValidate ? '‚úÖ' : '‚ùå'}`)
    console.log(`  - Cr√©er des achats: ${canCreate ? '‚úÖ' : '‚ùå'}`)
  }

  // Test 8: V√©rifier les fonctionnalit√©s de recherche
  console.log('\n8Ô∏è‚É£ Test des fonctionnalit√©s de recherche:')
  
  if (pendingPurchases && pendingPurchases.length > 0) {
    const testPurchase = pendingPurchases[0]
    const searchTerms = [
      testPurchase.suppliers?.name,
      testPurchase.products?.name,
      testPurchase.products?.sku,
      'RECHERCHE_INEXISTANTE'
    ]
    
    for (const term of searchTerms) {
      if (term) {
        const filtered = pendingPurchases.filter(purchase =>
          purchase.suppliers?.name.toLowerCase().includes(term.toLowerCase()) ||
          purchase.products?.name.toLowerCase().includes(term.toLowerCase()) ||
          purchase.products?.sku.toLowerCase().includes(term.toLowerCase())
        )
        console.log(`  üîç Recherche "${term}": ${filtered.length} achat(s) trouv√©(s)`)
      }
    }
  }

  // Test 9: V√©rifier les statuts et badges
  console.log('\n9Ô∏è‚É£ V√©rification des statuts et badges:')
  
  if (validatedPurchases && validatedPurchases.length > 0) {
    let withDiscrepancy = 0
    let withoutDiscrepancy = 0
    
    validatedPurchases.forEach(purchase => {
      if (purchase.validated_quantity !== purchase.quantity) {
        withDiscrepancy++
      } else {
        withoutDiscrepancy++
      }
    })
    
    console.log('  üìä R√©partition des statuts:')
    console.log(`     - Valid√©s sans √©cart: ${withoutDiscrepancy}`)
    console.log(`     - Valid√©s avec √©cart: ${withDiscrepancy}`)
  }

  // Test 10: V√©rifier les performances
  console.log('\nüîü Test des performances:')
  
  const startTime = Date.now()
  const { data: performanceTest, error: performanceError } = await supabase
    .from('purchases')
    .select('*')
    .limit(100)
  
  const endTime = Date.now()
  const queryTime = endTime - startTime
  
  if (performanceError) {
    console.error('  ‚ùå Erreur lors du test de performance:', performanceError)
  } else {
    console.log(`  ‚ö° Temps de requ√™te: ${queryTime}ms`)
    console.log(`  üìä ${performanceTest?.length || 0} achats r√©cup√©r√©s`)
    
    if (queryTime < 1000) {
      console.log('  ‚úÖ Performance acceptable')
    } else {
      console.log('  ‚ö†Ô∏è Performance lente, optimisation recommand√©e')
    }
  }

  console.log('\n‚úÖ Test de la page Arrivage termin√©!')
  console.log('\nüìã R√©sum√© des v√©rifications:')
  console.log('  - Donn√©es existantes: ‚úÖ Analys√©es')
  console.log('  - Structure des donn√©es: ‚úÖ V√©rifi√©e')
  console.log('  - Relations et contraintes: ‚úÖ Contr√¥l√©es')
  console.log('  - Politiques RLS: ‚úÖ V√©rifi√©es')
  console.log('  - Calculs et statistiques: ‚úÖ Valid√©s')
  console.log('  - Coh√©rence des donn√©es: ‚úÖ Test√©e')
  console.log('  - Permissions par r√¥le: ‚úÖ D√©finies')
  console.log('  - Fonctionnalit√©s de recherche: ‚úÖ Test√©es')
  console.log('  - Statuts et badges: ‚úÖ V√©rifi√©s')
  console.log('  - Performances: ‚úÖ Mesur√©es')
}

// Ex√©cuter le test
testArrivalsPage().catch(console.error) 